- Class: meta
  Course: Biometry
  Lesson: 5.2 - P-value
  Author: Nick Gondek
  Type: Standard
  Organization: University of Minnesota
  Version: 2.4.2

- Class: figure
  Output: Now that we've got some idea as to what a randomization distribution is, let's make one for CaffeineTaps and answer our question once and for all. 
  Figure: caffeine.R
  FigureType: new

- Class: cmd_question
  Output: First off, let's get the actual diffmean between the two groups so we know what we're looking for. Try it now - CaffDiff <- diffmean(Taps~Group, data=CaffeineTaps)
  CorrectAnswer: CaffDiff<- diffmean(Taps~Group, data=CaffeineTaps)
  AnswerTests: omnitest(correctExpr='CaffDiff <- diffmean(Taps~Group, data=CaffeineTaps)')
  Hint: Enter - CaffDiff <- diffmean(Taps~Group, data=CaffieneTaps)

- Class: cmd_question
  Output: If you don't already know mean was larger, you might not know how to interpret your diffmean, so it's a good idea to use the mean() function to double check. Try it now, just replace diffmean with mean in the previous code.
  CorrectAnswer: mean(Taps~Group, data=CaffeineTaps)
  AnswerTests: omnitest(correctExpr='mean(Taps~Group, data=CaffeineTaps)')
  Hint: Enter - mean(Taps~Group, data=CaffieneTaps)

- Class: text
  Output: So now we know that we're subtracting the Caffeine group from the NoCaffeine group, and that the difference is -3.5.

- Class: text
  Output: Now, we need to make a randomization distribution. Recall, we want to create a situation where caffeination has no effect on tap rate, and then take the diffmean. To do so, we need to randomly re-assign each value to either the Caffeine or NoCaffeine group!

- Class: cmd_question
  Output: To that effect, we'll use the shuffle() function to randomly reorder the Groups variable when we use the function diffmean. Try it now - diffmean(Taps~shuffle(Group), data=CaffeineTaps)
  CorrectAnswer: diffmean(Taps~shuffle(Group), data=CaffeineTaps)
  AnswerTests: omnitest(correctExpr='diffmean(Taps~shuffle(Group), data=CaffeineTaps)')
  Hint: Enter - diffmean(Taps~shuffle(Group), data=CaffeineTaps)

- Class: cmd_question
  Output: Great, that's exactly what we want. You'll notice that it's different than the -3.5 of the original data, but it's not exactly zero. Now, we want to do this a total of 1000 times using the following format - do()*{your code}. Try it now, and save it as RandDist.
  CorrectAnswer: RandDist <- do(1000)*{diffmean(Taps~shuffle(Group), data=CaffeineTaps)}
  AnswerTests: omnitest(correctExpr='RandDist <- do(1000)*{diffmean(Taps~shuffle(Group), data=CaffeineTaps)}')
  Hint: First, we need RandDist <- in order to save our different values. Then, we put the number 1000 inside the do() function in order to repeat the loop 1000 times. Lastly, we put the same code we previously used inside of the curly braces. 

- Class: text
  Output: Now we have a data frame, with one column called 'diffmean', and 1000 different randomized diffmean values. 

- Class: cmd_question
  Output: Let's plot these values using a histogram in order to see where our true diffmean lies. Try it now - histogram(~diffmean, data=RandDist)
  CorrectAnswer: histogram(~diffmean, data=RandDist)
  AnswerTests: omnitest(correctExpr='histogram(~diffmean, data=RandDist)')
  Hint: Enter - histogram(~diffmean, data=RandDist)

- Class: text
  Output: Now we have a normally-shaped distribution, centered at zero, that represents 1000 possible diffmeans if there was no connection between Caffeine and tap rate. To finally answer our question we need a p-value. 

- Class: cmd_question
  Output: A p-value represents the proportion of randomized values that are AS or MORE extreme as the value we observed with the real data. Basically, in how many of our simulated cases did we get a value as extreme as -3.5? To do so, we enter - prop(~diffmean > CaffDiff, data=RandDist)
  CorrectAnswer: prop(~diffmean < CaffDiff, data=RandDist)
  AnswerTests: omnitest(correctExpr='prop(~diffmean < CaffDiff, data=RandDist)')
  Hint: Enter - prop(~diffmean < CaffDiff, data=RandDist)

- Class: text
  Output: At a 95% confidence level, we call something significant if the p-value is lower than .05 - and this is MUCH lower than .05! Thus, we can say with statistical confidence that Caffeine affects Tap rate in students, and the magnitude of this difference is 3.5 Taps per Minute. In the next section, we'll work on identifying the differences between randomization and bootstrap distributions.
  
- Class: figure
  Output: Good work! You've completed Pre-Lab 5.2. An 8-digit code will appear in the console below - enter this code into the appropriate quiz on moodle in order to receive credit. 
  Figure: c.R
  FigureType: new

- Class: meta
  Course: Biometry
  Lesson: 2 - vectors, data frames, and manipulation
  Author: Nick Gondek
  Type: Standard
  Organization: University of Minnesota
  Version: 2.4.2


- Class: text
  Output: Welcome to pre-lab 2 - vectors, data frames, and manipulation. In this pre-lab, we'll look at a couple of ways that R stores data, and how we can manipulate those data. 

- Class: text
  Output: In the last lesson, we saved a single value to an object called test. In fact, you might still have it in your 'global environment' - look in the upper right corner to check.

- Class: text
  Output: We won't be using this object any more - to clear it (and everything else) from your workspace, click the broom icon in the top right corner of R-Studio. It's a good idea to do this periodically to keep yourself organized!

- Class: cmd_question
  Output: Let's introduce the simplest form of data storage in R - a 'vector'. A vector is a chain of data elements that are the same type. For example, all numbers, all characters, etc. This vector can be 3 elements long or 3000 elements long - the length doesn't matter. Now, we'll create a vector - type a<-c(1,3,5,7,9) into the console.
  CorrectAnswer: a<-c(1,3,5,7,9)
  AnswerTests: omnitest(correctExpr='a<-c(1,3,5,7,9)', strict=FALSE)
  Hint: Don't worry about what c() does just yet - we'll get to it. Just type a<-c(1,3,5,7,9) into the console and press enter.

- Class: cmd_question
  Output: Now, let's recall that object by typing its name into the console and pressing enter.
  CorrectAnswer: a
  AnswerTests: omnitest(correctExpr='a', strict=FALSE)
  Hint: Just type a and press enter.

- Class: text
  Output: You'll see that R printed out all 5 numbers at once. What we've just created is a numeric vector, with length 5 - because they're numbers, and there are five of them!

- Class: cmd_question
  Output: Now, let's make a vector of characters instead of numbers. Most of the time, a character is a letter or a symbol. Type in b<-c("F", "g", "&", "r")
  CorrectAnswer: b<-c("F", "g", "&", "r")
  AnswerTests: omnitest(correctExpr='b<-c("F", "g", "&", "r")')
  Hint: Don't worry about what c() does just yet - we'll get to it. Just type  b<-c("F", "g", "&", "r") into the console and press enter.

- Class: text
  Output: Just like before, you can enter 'b' in the console in order to recall this object. This is a character vector, of length 4.

- Class: text
  Output: You'll notice that any time we create a vector of more than one element, we use the function c() to combine them (for the record, c is actually short for concatenate). R won't know how to handle multiple elements if you don't concatenate them using the c() function. 
  
- Class: cmd_question
  Output: Vectors can be useful in a lot of ways. To illustrate this, let's try some simple math on the numeric vector we created earlier, called 'a'. Try multiplying this object by 3.
  CorrectAnswer: a*3
  AnswerTests: omnitest(correctExpr='a*3', strict=FALSE)
  Hint: Just as if a were a number, multiply it by 3.

- Class: text
  Output: We took a vector of length 5 in, multiplied it by 3, and got a vector of length 5 out. That's because R applied that multiplication independently to each element.

- Class: cmd_question
  Output: Let's make another vector of length 5, using a new operator. The ":" symbol creates a vector of sequential integers when it is placed between two numbers. Try it now - type c<-6:10 into the console. 
  CorrectAnswer: c<-6:10
  AnswerTests: omnitest(correctExpr='c<-6:10', strict=FALSE)
  Hint: It might look weird, but the ':' symbol is just another operator like '+' or '-'. Enter c<-'5:10'. 

- Class: cmd_question
  Output: Look into your workspace in the upper right corner of RStudio - you should see that 'c' is a sequence between 6 and 10; 6, 7, 8, 9, and 10. Try adding 'a' and 'c' together.
  CorrectAnswer: a+c
  AnswerTests: omnitest(correctExpr='a+c', strict=FALSE)
  Hint: Even though we are using two vectors, you still use the '+' sign.

- Class: text
  Output: R took the first element of each vector, and added them together to get the first element of the resultant vector. It did the same for each element - 1+6 = 7, 3+7 = 10, etc.

- Class: figure
  Output: Let's take a look at a more structured type of data - a data frame. 
  Figure: hockey.R
  FigureType: new
  
- Class: cmd_question
  Output: Data frames are essentially just tables, where each column is a vector of the same length. These vectors do not have to be of the same type. A data frame has appeared in your working environment (the top right). Click on 'HockeyPenalties' to see how it's structured.
  CorrectAnswer: View(HockeyPenalties)
  AnswerTests: omnitest(correctExpr='View(HockeyPenalties)', strict=FALSE)
  Hint: 

- Class: text
  Output: This is a data frame with 30 rows and 2 columns, and can be thought of as 2 vectors, with length 30, that are stuck together. For those curious, this table shows the average penalty minutes per game for each of the 30 teams in the the National Hockey League in the 2010 to 2011 season - from the friendly and docile Florida Panthers with 8.8 minutes per game, to the brutish and dirty New York Islanders at 18.0 minutes per game.


- Class: cmd_question
  Output: To show that a data frame is simply vectors stuck together, let's 'extract' one! The '$' operator takes a data frame, and extracts the column with the name provided. Let's look at the penalty minutes per game as a numeric vector - enter HockeyPenalties$PIMperG.
  CorrectAnswer: HockeyPenalties$PIMperG
  AnswerTests: omnitest(correctExpr='HockeyPenalties$PIMperG')
  Hint: First, the name of the data frame, and second, the name of the column - HockeyPenalties$PIMperG

- Class: cmd_question
  Output: Try to do the same thing, with the column named 'Team'. 
  CorrectAnswer: HockeyPenalties$Team
  AnswerTests: omnitest(correctExpr='HockeyPenalties$Team')
  Hint: Use the same format - First, the name of the data frame, and second, the name of the column, with '$' in between!

- Class: text
  Output: We'll look more into data frames in the next lesson, but now you know some basic manipulation of vectors and data frames!

- Class: figure
  Output: Good work! You've completed pre-lab 2. A 6-digit code will appear in the console below - enter this code into the appropriate quiz on moodle in order to receive credit. 
  Figure: c.R
  FigureType: new

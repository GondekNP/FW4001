- Class: meta
  Course: Biometry
  Lesson: 1 - R as a calculator, intro to functions
  Author: Nick Gondek
  Type: Standard
  Organization: University of Minnesota
  Version: 2.4.2

- Class: text
  Output: Welcome to Biometry (FW 4001)! If you're seeing this message, you've successfully installed R and the 'swirl' package. This first section is designed to get you up to speed with these, and to ensure that everything is working properly on your computer.    

- Class: text
  Output: RStudio is typically broken down into three or four main panels. The panel that you're reading off of right now is called the 'console' - this is where the user enters their code. In its most basic form, R can be used as a calculator.

- Class: cmd_question
  Output: For example, perhaps you'd like to know the product of 15 and 17. You'd simply type in '15*17' in the console below, and press enter. Try it below!
  CorrectAnswer: 15*17
  AnswerTests: omnitest(correctExpr='15*17', 255)
  Hint: Just like a calculator - 15 * 17

- Class: cmd_question
  Output: Now, try dividing 30 by the sum of 12 and 3. This can be accomplished by using a set of parentheses around 12 and 3, just like you would on a calculator.
  CorrectAnswer: 30 / (12+3)
  AnswerTests: omnitest(correctExpr='30 / (12+3)', 2)
  Hint: We want to make sure that 12 and 3 are added together before we divide, so we type 30 / (12+3).

- Class: text
  Output: Sometimes, if can be helpful to save one of these values as an 'object' for later reuse. An object can take on many forms, but in this case, we want to assign it a single value. In order to assign a value to an object, we need to use the assignment operator '<-'. 

- Class: cmd_question
  Output: Let's try it; assign the product of 12 and 15 to a new object called 'test'. 
  CorrectAnswer: test <- 12 * 15
  AnswerTests: omnitest(correctExpr=c('test <- 12 * 15'), strict=FALSE)
  Hint: Type in test <- 12 * 15 and press enter. 

- Class: text
  Output: Now that we have this value saved, we can recall it by typing in the name of the object into the console. The upper-right pane of RStudio contains all of the objects that you've created thus far - right now, there should be only one, called test.

- Class: cmd_question
  Output: Try calling this value back, by typing in the name of the object into the console. 
  CorrectAnswer: test
  AnswerTests: omnitest(correctExpr='test')
  Hint: Just type 'test', and press enter. 

- Class: cmd_question
  Output: You can do all sorts of things with this saved value, just as if you were typing a number into the console. For example, try dividing that object by 100. 
  CorrectAnswer: test/100
  AnswerTests: omnitest(correctExpr='test/100', strict=FALSE)
  Hint: Just as if it were a number, type in test/100. 

- Class: text
  Output: So far, we've been using symbols that you would find on any standard calculator (-,+,/,*). Most things we will try to accomplish using R, though, require the use of 'functions'. A function is some sort of procedure or routine that makes use of something provided to it. As a very simple example, the function 'sqrt()' takes the square root of whatever is provided inside the parentheses.

- Class: cmd_question
  Output: Let's try it now. Take the square root of 144 using the sqrt() function. 
  CorrectAnswer: sqrt(144)
  AnswerTests: omnitest(correctExpr='sqrt(144)', strict=FALSE)
  Hint: Enter sqrt(144) into the console. 

- Class: cmd_question
  Output: Now, try using the same square root function on our saved object, 'test'. 
  CorrectAnswer: sqrt(test)
  AnswerTests: omnitest(correctExpr='sqrt(test)', strict=FALSE)
  Hint: Don't be offput by the fact that you're taking the square root of a word - R will recall it as if it were a number! (Enter sqrt(test) into the console.)

- Class: text
  Output: sqrt is not the only function that has a set of parentheses attached - in fact, every function has a set of parentheses. Inside these parentheses, you provide the function with all of the information it needs to operate. In the case of sqrt(), all that is needed is a single number, but other functions take on many bits of information to run correctly. These are referred to as the 'arguments' of the function. 

- Class: cmd_question
  Output: You'll learn about this function later on, but just to get a sense of how arguments work, let's take a look at rnorm(). rnorm is a function that generates random values based on a normal, bell shaped distribution. Try typing in rnorm() into the console, but before you press enter, press the tab key while inside the parentheses in order to take a look at the three arguments this function takes on (x, mean, and sd). By using the arrow keys, you can see a short description of each argument. Just to see what happens, trying running rnorm(n=5, mean=10, sd=2).  
  CorrectAnswer: rnorm(n=5, mean=10, sd=2)
  AnswerTests: omnitest(correctExpr='rnorm(n=5, mean=10, sd=2)', strict=FALSE)
  Hint: Just type in rnorm(n=5, mean=10, sd=2), and press enter.  

- Class: cmd_question
  Output: You'll notice that we got 5 random numbers - that's because we specified n=5 as an argument for rnorm. Let's try running it again, but this time, let's generate 15 random numbers. 
  CorrectAnswer: rnorm(n=15, mean=10, sd=2)
  AnswerTests: omnitest(correctExpr='rnorm(n=15, mean=10, sd=2)', strict=FALSE)
  Hint: Not much has to change from the last function we ran. We need to change n=5 to n=15. 

- Class: cmd_question
  Output: Let's make one last change. Change the mean argument to be 1000 instead of 10.  
  CorrectAnswer: rnorm(n=15, mean=1000, sd=2)
  AnswerTests: omnitest(correctExpr='rnorm(n=15, mean=1000, sd=2)', strict=FALSE)
  Hint: Not much has to change from the last function we ran. We need to change mean=10 to mean=1000. 

- Class: text
  Output: Now you'll see that our new 15 random numbers are much bigger than the previous 15 - that's because they're drawn from a normal distribution with a mean of 1000 instead of 10 (more on this later). The important thing to note here is that we can change the arguments of a function in order to change how it behaves! 

- Class: figure
  Output: Good work! You've completed Lesson 1. A 6-digit code will appear in the console below - enter this code into the appropriate quiz on moodle in order to receive credit. 
  Figure: c.R
  FigureType: new

